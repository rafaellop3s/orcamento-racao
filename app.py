import streamlit as st
import pandas as pd
from io import BytesIO
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
import locale

# --- SISTEMA DE AUTENTICA√á√ÉO ---
SENHA_CORRETA = "racao123"  # Troque para a senha que voc√™s v√£o combinar

if "logado" not in st.session_state:
    st.session_state.logado = False

if not st.session_state.logado:
    # Tela de login otimizada para mobile
    st.set_page_config(layout="centered")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.title("üîê F√°brica de Ra√ß√£o")
        st.image("https://cdn-icons-png.flaticon.com/512/1005/1005141.png", width=100)
        senha = st.text_input("Senha de acesso:", type="password", key="senha_input")
        
        if st.button("üëâ Entrar no Sistema", use_container_width=True, type="primary"):
            if senha == SENHA_CORRETA:
                st.session_state.logado = True
                st.rerun()
            else:
                st.error("Senha incorreta!")
        
        st.info("üìû Solicite acesso ao administrador")
    st.stop()

# --- CONFIGURA√á√ÉO PRINCIPAL (AP√ìS LOGIN) ---
# --- Configurar local para portugu√™s do Brasil ---
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except locale.Error:
    locale.setlocale(locale.LC_ALL, 'Portuguese_Brazil.1252')

# --- Fun√ß√£o para formatar valores em R$ ---
def br_real(valor):
    return f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

# --- Configura√ß√£o da p√°gina mobile-friendly ---
st.set_page_config(
    page_title="Or√ßamento - F√°brica de Ra√ß√£o", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

# --- CSS para mobile optimization ---
st.markdown("""
    <style>
    /* Melhorar toque em bot√µes para mobile */
    .stButton > button {
        width: 100%;
        min-height: 3rem;
        font-size: 1.1rem;
    }
    
    /* Formul√°rios mais compactos */
    .stForm {
        padding: 0.5rem;
    }
    
    /* Melhorar visualiza√ß√£o de tabelas no mobile */
    .dataframe {
        font-size: 0.85em;
    }
    
    /* Ajustar inputs para mobile */
    .stTextInput input, .stNumberInput input, .stSelectbox select {
        font-size: 1rem;
        padding: 0.8rem;
    }
    
    /* Esconder menu e rodap√© */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    
    /* Melhor espa√ßamento geral */
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    </style>
""", unsafe_allow_html=True)

# --- Logo e t√≠tulo ---
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    st.image("https://cdn-icons-png.flaticon.com/512/1005/1005141.png", width=80)
    st.title("üìä Sistema de Or√ßamentos")

# --- 1Ô∏è‚É£ Carregar ou criar planilha de produtos ---
try:
    produtos_df = pd.read_excel("produtos.xlsx")
except FileNotFoundError:
    st.warning("Arquivo 'produtos.xlsx' n√£o encontrado. Usando dados de exemplo.")
    produtos_df = pd.DataFrame({
        "Produto": ["Ra√ß√£o Crescimento", "Ra√ß√£o Engorda", "Sal Mineral"],
        "Valor": [75.50, 82.00, 55.90]
    })

with st.expander("üìÑ Produtos Dispon√≠veis"):
    st.dataframe(produtos_df, use_container_width=True)

# --- 2Ô∏è‚É£ Inicializar DataFrame na sess√£o ---
if "df_calc" not in st.session_state:
    st.session_state.df_calc = pd.DataFrame(columns=[
        "Produto", "Valor", "Frete", "Quantidade", "Desconto", 
        "Frete Total", "Desconto por item", "Total"
    ])

# --- 3Ô∏è‚É£ Formul√°rio para adicionar item (mobile optimized) ---
st.subheader("üìù Adicionar Item")
with st.form("form_item", clear_on_submit=True):
    col1, col2 = st.columns(2)
    with col1:
        produto_selecionado = st.selectbox("Produto", produtos_df["Produto"], key="produto_select")
        quantidade = st.number_input("Quantidade (sacos)", min_value=1, value=1, key="qtd_input")
    with col2:
        frete = st.number_input("Frete por produto (R$)", min_value=0.0, value=0.0, step=0.5, key="frete_input")
        desconto = st.number_input("Desconto (%)", min_value=0.0, max_value=100.0, value=0.0, step=0.5, key="desconto_input")
    
    submitted = st.form_submit_button("‚ûï Adicionar Item", use_container_width=True)

if submitted:
    valor = float(produtos_df.loc[produtos_df["Produto"] == produto_selecionado, "Valor"].iloc[0])
    total_item = (valor * quantidade) + (frete * quantidade) - (valor * (desconto / 100) * quantidade)
    new_row = {
        "Produto": produto_selecionado,
        "Valor": valor,
        "Frete": frete,
        "Quantidade": quantidade,
        "Desconto": desconto,
        "Frete Total": frete * quantidade,
        "Desconto por item": valor * (desconto / 100) * quantidade,
        "Total": total_item
    }
    st.session_state.df_calc = pd.concat([st.session_state.df_calc, pd.DataFrame([new_row])], ignore_index=True)
    st.success(f"‚úÖ '{produto_selecionado}' adicionado!")
    st.rerun()

# --- 4Ô∏è‚É£ Mostrar tabela cumulativa ---
if not st.session_state.df_calc.empty:
    st.subheader("üìä Itens do Or√ßamento")
    
    # Bot√£o para limpar tudo
    if st.button("üóëÔ∏è Limpar Todos os Itens", type="secondary", use_container_width=True):
        st.session_state.df_calc = pd.DataFrame(columns=[
            "Produto", "Valor", "Frete", "Quantidade", "Desconto", 
            "Frete Total", "Desconto por item", "Total"
        ])
        st.rerun()
    
    df_display = st.session_state.df_calc.copy()
    for col in ["Valor", "Frete", "Frete Total", "Desconto por item", "Total"]:
        df_display[col] = df_display[col].apply(lambda x: f"{x:.2f}")
    df_display["Quantidade"] = df_display["Quantidade"].apply(lambda x: f"{x} saco(s)")
    df_display["Desconto"] = df_display["Desconto"].apply(lambda x: f"{x}%")
    
    st.dataframe(df_display, use_container_width=True, hide_index=True)

# --- C√°lculos de totais ---
total_produtos = st.session_state.df_calc['Total'].sum() if not st.session_state.df_calc.empty else 0
quantidade_total = st.session_state.df_calc['Quantidade'].sum() if not st.session_state.df_calc.empty else 0
frete_total = st.session_state.df_calc['Frete Total'].sum() if not st.session_state.df_calc.empty else 0

# --- Fun√ß√£o para calcular coeficiente por prazo ---
def coeficiente_por_prazo(prazo, quantidade_total):
    if prazo == "30":
        if quantidade_total >= 600:
            return 0.0212940034619435
        elif quantidade_total >= 300:
            return 0.0272940034619435
        else:
            return 0.0332940034619435
    elif prazo == "60":
        if quantidade_total >= 600:
            return 0.0393507895679797
        elif quantidade_total >= 300:
            return 0.0453507895679797
        else:
            return 0.0513507895679797
    elif prazo == "15/45":
        if quantidade_total >= 600:
            return 0.021294003
        elif quantidade_total >= 300:
            return 0.027294003
        else:
            return 0.033294003
    elif prazo == "30/60":
        if quantidade_total >= 600:
            return 0.030248473
        elif quantidade_total >= 300:
            return 0.036248473
        else:
            return 0.042248473
    elif prazo == "30/60/90":
        if quantidade_total >= 600:
            return 0.03935079
        elif quantidade_total >= 300:
            return 0.04535079
        else:
            return 0.05135079
    return 0.05  # fallback

# --- Fun√ß√£o para calcular valor a prazo ---
def calcular_valor_prazo(total_produtos, prazo, quantidade_total):
    coef = coeficiente_por_prazo(prazo, quantidade_total)
    valor_juros = total_produtos * (1 + coef)
    return valor_juros

# --- Condi√ß√µes de pagamento ---
condicoes = [
    {"tipo": "A VISTA", "valor_final": total_produtos, "parcelas": 1},
    {"tipo": "PRAZO 30", "valor_final": calcular_valor_prazo(total_produtos, "30", quantidade_total), "parcelas": 1},
    {"tipo": "PRAZO 60", "valor_final": calcular_valor_prazo(total_produtos, "60", quantidade_total), "parcelas": 1},
    {"tipo": "PRAZO 15/45", "valor_final": calcular_valor_prazo(total_produtos, "15/45", quantidade_total), "parcelas": 2},
    {"tipo": "PRAZO 30/60", "valor_final": calcular_valor_prazo(total_produtos, "30/60", quantidade_total), "parcelas": 2},
    {"tipo": "PRAZO 30/60/90", "valor_final": calcular_valor_prazo(total_produtos, "30/60/90", quantidade_total), "parcelas": 3},
]

tabela_prazos = []
for c in condicoes:
    valor_total = c["valor_final"]
    num_parcelas = c["parcelas"]
    if num_parcelas > 1:
        valor_parcela = valor_total / num_parcelas
        texto_parcelas = f"{num_parcelas} x {br_real(valor_parcela)}"
    else:
        texto_parcelas = br_real(valor_total)
    tabela_prazos.append([c["tipo"], br_real(valor_total), texto_parcelas])

# --- Exibir resultados ---
st.metric(label="üí∞ Total Geral (√† vista)", value=br_real(total_produtos))

df_prazos = pd.DataFrame(tabela_prazos, columns=["Condi√ß√£o", "Valor Total", "Parcela(s)"])
st.subheader("üìÖ Condi√ß√µes de Pagamento")
st.dataframe(df_prazos, use_container_width=True, hide_index=True)

# --- 5Ô∏è‚É£ Bot√£o para gerar PDF premium ---
if st.button("üìÑ Gerar PDF do Or√ßamento", use_container_width=True, type="primary"):
    if st.session_state.df_calc.empty:
        st.warning("N√£o h√° itens no or√ßamento para gerar PDF.")
    else:
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=30, leftMargin=30, topMargin=30, bottomMargin=18)
        elements = []
        styles = getSampleStyleSheet()
        
        # T√≠tulo
        title = Paragraph("<b>Or√ßamento - F√°brica de Ra√ß√£o</b>", styles['Title'])
        elements.append(title)
        elements.append(Spacer(1, 20))
        
        # Preparar dados da tabela principal
        df_display_pdf = st.session_state.df_calc.copy()
        for col in ["Valor", "Frete", "Frete Total", "Desconto por item", "Total"]:
            df_display_pdf[col] = df_display_pdf[col].apply(br_real)
        df_display_pdf["Quantidade"] = df_display_pdf["Quantidade"].apply(lambda x: f"{x} saco(s)")
        df_display_pdf["Desconto"] = df_display_pdf["Desconto"].apply(lambda x: f"{x}%")
        
        # Criar tabela
        data = [list(df_display_pdf.columns)] + df_display_pdf.values.tolist()
        tabela = Table(data, hAlign='CENTER', repeatRows=1)
        
        # Estilo da tabela
        tabela_style = TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 8),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.whitesmoke, colors.lightgrey]),
        ])
        
        # Destacar itens com valor alto
        for i, row in st.session_state.df_calc.iterrows():
            if row['Total'] > 1000:
                tabela_style.add('BACKGROUND', (0, i + 1), (-1, i + 1), colors.lightcoral)
                tabela_style.add('TEXTCOLOR', (0, i + 1), (-1, i + 1), colors.whitesmoke)
        
        tabela.setStyle(tabela_style)
        elements.append(tabela)
        elements.append(Spacer(1, 20))
        
        # Total geral
        total_paragraph = Paragraph(f"<b>Total Geral (√† vista): {br_real(total_produtos)}</b>", styles['Heading2'])
        elements.append(total_paragraph)
        
        # Informa√ß√µes adicionais
        elements.append(Spacer(1, 10))
        elements.append(Paragraph(f"<b>Quantidade Total: {quantidade_total} saco(s)</b>", styles['Normal']))
        elements.append(Paragraph(f"<b>Frete Total: {br_real(frete_total)}</b>", styles['Normal']))
        
        # Condi√ß√µes de pagamento
        elements.append(Spacer(1, 20))
        elements.append(Paragraph("<b>Condi√ß√µes de Pagamento</b>", styles['Heading2']))
        
        data_prazos_pdf = [["Condi√ß√£o", "Valor Total", "Parcela(s)"]]
        for c in condicoes:
            valor_total = c["valor_final"]
            num_parcelas = c["parcelas"]
            if num_parcelas > 1:
                valor_parcela = valor_total / num_parcelas
                texto_parcelas = f"{num_parcelas} x {br_real(valor_parcela)}"
            else:
                texto_parcelas = br_real(valor_total)
            data_prazos_pdf.append([c["tipo"], br_real(valor_total), texto_parcelas])
        
        tabela_pdf = Table(data_prazos_pdf, hAlign='CENTER', repeatRows=1)
        tabela_pdf.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.green),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.whitesmoke, colors.lightgrey]),
        ]))
        elements.append(tabela_pdf)
        
        # Rodap√©
        elements.append(Spacer(1, 20))
        footer = Paragraph("Or√ßamento gerado automaticamente - F√°brica de Ra√ß√£o", styles['Normal'])
        elements.append(footer)
        
        # Gerar PDF
        doc.build(elements)
        buffer.seek(0)
        
        # Bot√£o de download
        st.download_button(
            label="‚¨áÔ∏è Baixar PDF do Or√ßamento",
            data=buffer,
            file_name="orcamento.pdf",
            mime="application/pdf",
            use_container_width=True
        )
        st.success("PDF gerado com sucesso!")

# --- Bot√£o de logout ---
if st.button("üö™ Sair do Sistema", type="secondary", use_container_width=True):
    st.session_state.logado = False
    st.rerun()